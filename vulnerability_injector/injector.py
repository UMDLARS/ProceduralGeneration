import sys

from marshmallow import Schema, fields
from marshmallow import pprint
from marshmallow_enum import EnumField

#This allows us to import from topology_generator
sys.path.append('../topology_generator')
from node import Node, NodeType, NodeSchema
from topology import Topology, TopologySchema

from vulnerabilitytype import VulnerabilityType

def main():
    #import the file (in this case, it's just called data.json and is the output of the topology generator, and inject some random vulnerabilities into it
    input_json = open("../topology_generator/data.json", "r").read()
    topology, errors = TopologySchema().loads(input_json)

    #Modify the topology by opening telnet on all vulnerabilities
    for node in topology.nodes:
        node.vulnerabilities.append(VulnerabilityType.OPEN_TELNET)

    data, errors = TopologySchema().dumps(topology)

    if not errors:
        print("Successfully parsed topology")
        pprint(data)
    else:
        print("Error parsing topology", errors, data)

if __name__ == "__main__":
    main()
    

